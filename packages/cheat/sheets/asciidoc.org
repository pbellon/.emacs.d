#+INCLUDE "./base.org"
#+TITLE: AsciiDoc Syntax Quick Reference
# Converted from asciidoctor quick syntax reference: https://github.com/asciidoctor/asciidoctor.org

* About
AsciiDoc is a lightweight markup language for authoring notes, articles, documentation, books, web pages, slide decks and man pages in plain text.
This guide is a quick reference for the common AsciiDoc document and text formatting markup.

#+BEGIN_QUOTE
These examples focus on the output generated by the HTML backend.
AsciiDoc produces complementary output when generating PDF, EPUB, and DocBook.

Most features labeled _Asciidoctor only_ can be made available to the legacy AsciiDoc Python processor by using [[uri-config][this AsciiDoc configuration file]] provided by the Asciidoctor project.
#+END_QUOTE


* Paragraphs
** Normal
#+BEGIN_SRC adoc
Paragraphs don't require any special markup in AsciiDoc.
A paragraph is just one or more lines of consecutive text.

To begin a new paragraph, separate it by at least one blank line.
Newlines within a paragraph are not displayed.
#+END_SRC



** Literal
#+BEGIN_SRC adoc
A normal paragraph.

A paragraph offset by at least one space becomes a literal paragraph.
All lines in a literal paragraph must be adjacent.

A literal paragraph is displayed as preformatted text.
The text is shown in a fixed-width font.
Spaces and newlines,
like the ones in this sentence,
are preserved.

Another normal paragraph.
#+END_SRC



** Admonition
#+BEGIN_SRC adoc
NOTE: An admonition paragraph draws the reader's attention to
auxiliary information.
Its purpose is determined by the label
at the beginning of the paragraph.

Here are the other built-in admonition types:

TIP: Pro tip...

IMPORTANT: Don't forget...

WARNING: Watch out for...

CAUTION: Ensure that...
#+END_SRC

NOTE: You can also create [[admon-bl][admonition blocks]].


** Lead paragraph
#+BEGIN_SRC adoc
[.lead]
This text will be styled as a lead paragraph (i.e., larger font).
#+END_SRC

NOTE: The default Asciidoctor stylesheet automatically styles the first paragraph of the preamble as a lead paragraph.



** More Paragraph, Admonition and Literal Block Examples
#+BEGIN_QUOTE
See these sections in the Asciidoctor User Manual for more information and examples.
- [[uri-para][Paragraphs]]
- [[uri-literal][Literal Text and Blocks]]
- [[uri-admon][Admonitions]]
#+END_QUOTE


* Formatted Text

** Bold, Italic, and Monospace
#+BEGIN_SRC adoc
bold *constrained* & **un**constrained

italic _constrained_ & __un__constrained

bold italic *_constrained_* & **__un__**constrained

monospace ~constrained~ & `~un~`constrained

monospace bold `*constrained*` & ``**un**``constrained

monospace italic `_constrained_` & ``__un__``constrained

monospace bold italic `*_constrained_*` & ``**__un__**``constrained
#+END_SRC


** Monospace vs codespan
#+BEGIN_SRC adoc
`{cpp}` is valid syntax in the programming language by the same name.

`+WHERE id <= 20 AND value = "{name}"+` is a SQL WHERE clause.
#+END_SRC

NOTE: The meaning of backtick (`pass:[`]`) and plus (`+`) changed in Asciidoctor 1.5.0.
Backticks only make the text monospaced, whereas pluses passthrough text without applying formatting.
See the <<migration.adoc#,migration page>> for details.


** Marks and Custom Styling
#+BEGIN_SRC adoc
Werewolves are allergic to #cassia cinnamon#.

Did the werewolves read the [.small]#small print#?

Where did all the [.underline]#cores# run off to?

We need [.line-through]#ten# make that twenty VMs.

[.big]##O##nce upon an infinite loop.
#+END_SRC


** Superscript and Subscript
#+BEGIN_SRC adoc
^super^script phrase

~sub~script phrase
#+END_SRC


** Curved Quotation Marks and Apostrophes (Smart Quotes)
#+BEGIN_SRC adoc
"`double curved quotes`"

'`single curved quotes`'

Olaf's desk was a mess.

All of the werewolves`' desks were a mess.

Olaf had been with the company since the `'60s.
#+END_SRC


** More Text Formatting Examples
#+BEGIN_QUOTE
See these sections in the Asciidoctor User Manual for more information and examples.

- [[uri-bold][Bold and Italic Formatting]]
- [[uri-quote][Quotation Marks and Apostrophes]]
- [[uri-sub][Subscript and Superscript]]
- [[uri-mono][Monospace Formatting]]
- [[uri-css][Custom Styling with Attributes]]
- [[uri-pass][Passthrough Macros]]
#+END_QUOTE


* Document Header

IMPORTANT: A header is optional.

CAUTION: The header may not contain blank lines and must be offset from the content by at least one blank line.

** Title only
#+BEGIN_SRC adoc
= My Document's Title

My document provides...
#+END_SRC


** Title and author line
#+BEGIN_SRC adoc
= My Document's Title
Doc Writer <doc.writer@asciidoctor.org>

My document provides...
#+END_SRC

TIP: Asciidoctor allows multiple authors in the author line.
Use the semi-colon character to separate each author.


** Title, author line and revision line
#+BEGIN_SRC adoc
include::{includedir}/ex-rev.adoc[tag=b-base]
#+END_SRC

IMPORTANT: You cannot have a revision line without an author line.


** Document header with attributes
#+BEGIN_SRC adoc
= My Document's Title
Doc Writer <doc.writer@asciidoctor.org>
v1.0, 2014-01-01

My document provides...
#+END_SRC


* Section Titles (Headings)

** Article doctype
#+BEGIN_SRC adoc
= Document Title (Level 0)

== Level 1 Section Title

=== Level 2 Section Title

==== Level 3 Section Title

===== Level 4 Section Title

====== Level 5 Section Title

== Another Level 1 Section Title
#+END_SRC



WARNING: When using the article doctype (the default), you can only have one level-0 section title (i.e., the document title) and it must be in the document header.

NOTE: The number of equal signs matches the heading level in the HTML output.
For example, _Section Level 1_ becomes an `<h2>` heading.


** Book doctype
#+BEGIN_SRC adoc
include::{includedir}/ex-section.adoc[tag=book]
#+END_SRC



////
IMPORTANT: There are two other ways to define a section title.
_Their omission is intentional_.
They both require more markup and are therefore unnecessary.
The https://en.wikipedia.org/wiki/Setext[setext] title syntax (underlined text) is especially wasteful, hard to remember, hard to maintain and error prone.
The reader never sees the extra markup, so why type it?
*Be frugal!*
////


** Explicit id
#+BEGIN_SRC adoc
[#primitives-nulls]
== Primitive types and null values
#+END_SRC


** Section anchors and links (Asciidoctor only)
~sectanchors~
When this document attribute is set, a section icon anchor appears in front of the section title.

~sectlinks~
When this document attribute is set, the section titles become self-links.
This enables a reader to bookmark the section.

NOTE: Section title anchors depend on the default Asciidoctor stylesheet to render properly.


* Include Files

** Document parts
#+BEGIN_SRC adoc
= Reference Documentation
Lead Developer

This is documentation for project X.

include::basics.adoc[]

include::installation.adoc[]

include::example.adoc[]
#+END_SRC

CAUTION: Asciidoctor does not insert blank lines between adjacent include statements to keep the content separated.
Be sure to add a blank line in the source document to avoid unexpected results, such as a section title being swallowed.


** Include content from a URI
#+BEGIN_SRC adoc
include::https://raw.githubusercontent.com/asciidoctor/asciidoctor/master/README.adoc[]
#+END_SRC

NOTE: Including content from a URI is potentially dangerous, so it's disabled if the safe mode is SECURE or greater.
Assuming the safe mode is less than SECURE, you must also set the ~allow-uri-read~ attribute to permit Asciidoctor to read content from a URI.


* Breaks

** Hard line break
#+BEGIN_SRC adoc
Rubies are red, +
Topazes are blue.

[%hardbreaks]
Ruby is red.
Java is black.
#+END_SRC


** Thematic break (aka horizontal rule)
#+BEGIN_SRC adoc
before

'''

after
#+END_SRC


** Page break
#+BEGIN_SRC adoc
<<<
#+END_SRC


* Lists

** Unordered, basic 
   # Indented to avoid breaking structure
   #+BEGIN_SRC adoc
   * Edgar Allen Poe
   * Sheri S. Tepper
   * Bill Bryson
  #+END_SRC


** Unordered, basic (alt)
#+BEGIN_SRC adoc
- Edgar Allen Poe
- Sheri S. Tepper
- Bill Bryson
#+END_SRC

NOTE: A blank line is required before and after a list to separated it from other blocks.

TIP: You can force two adjacent lists apart by inserting a blank line followed by a line comment after the first list.
The convention is to use `//-` as the line comment to provide a hint to other authors that it's a list divider.


** Unordered, max nesting
   # Indented to avoid breaking structure
    #+BEGIN_SRC adoc
    * level 1
    ** level 2
    *** level 3
    **** level 4
    ***** level 5
    * level 1
    #+END_SRC

TIP: The unordered list marker can be changed using [[uri-marker][block styles]].


** Ordered, basic
#+BEGIN_SRC adoc
. Step 1
. Step 2
. Step 3
#+END_SRC

NOTE: You can choose to include an ordinal in front of each list marker, but they have to be in sequence.


** Ordered, nested
#+BEGIN_SRC adoc
. Step 1
. Step 2
.. Step 2a
.. Step 2b
. Step 3
#+END_SRC


** Ordered, max nesting
#+BEGIN_SRC adoc
. level 1
.. level 2
... level 3
.... level 4
..... level 5
. level 1
#+END_SRC

TIP: For ordered lists, Asciidoctor supports [[uri-list-num][numeration styles]] such as ~lowergreek~ and ~decimal-leading-zero~.


** Checklist
    # Indented to avoid breaking structure
    #+BEGIN_SRC adoc
    * [*] checked
    * [x] also checked
    * [ ] not checked
    *     normal list item
    #+END_SRC

TIP: Checklists can use {uri-checklist}[font-based icons and be interactive].


** Description, single-line
#+BEGIN_SRC adoc
first term:: definition of first term
second term:: definition of second term
#+END_SRC


** Description, multi-line
#+BEGIN_SRC adoc
first term::
definition of first term
second term::
definition of second term
#+END_SRC


** Q&A
#+BEGIN_SRC adoc
[qanda]
What is Asciidoctor?::
  An implementation of the AsciiDoc processor in Ruby.
What is the answer to the Ultimate Question?:: 42
#+END_SRC


** Mixed
#+BEGIN_SRC adoc
Operating Systems::
  Linux:::
    . Fedora
      * Desktop
    . Ubuntu
      * Desktop
      * Server
  BSD:::
    . FreeBSD
    . NetBSD

Cloud Providers::
  PaaS:::
    . OpenShift
    . CloudBees
  IaaS:::
    . Amazon EC2
    . Rackspace
#+END_SRC

TIP: Lists can be indented.
Leading whitespace is not significant.


** Complex content in outline lists
#+BEGIN_COMMENT Commented because it were breaking  adoc syntax highlighting, however it's valid asciidoctor syntax.
#+BEGIN_SRC adoc
 * Every list item has at least one paragraph of content,
   which may be wrapped, even using a hanging indent.
 +
 Additional paragraphs or blocks are adjoined by putting
 a list continuation on a line adjacent to both blocks.
 +
 list continuation:: a plus sign (`{plus}`) on a line by itself
 
 * A literal paragraph does not require a list continuation.

 $ gem install asciidoctor
   
 * AsciiDoc lists may contain any complex content.
 +
 [cols="2", options="header"]
 |===
 |Application
 |Language
 
 |AsciiDoc
 |Python
 
 |Asciidoctor
 |Ruby
 |===
#+END_SRC adoc
#+END_COMMENT


* Links

** External
#+BEGIN_SRC adoc
https://asciidoctor.org - automatic!

https://asciidoctor.org[Asciidoctor]

https://github.com/asciidoctor[Asciidoctor @ *GitHub*]
#+END_SRC


** With spaces and special characters
#+BEGIN_SRC adoc
link:++https://example.org/?q=[a b]++[URL with special characters]

link:https://example.org/?q=%5Ba%20b%5D[URL with special characters]
#+END_SRC


** Windows path
#+BEGIN_SRC adoc
link:\\server\share\whitepaper.pdf[Whitepaper]
#+END_SRC


** Relative
#+BEGIN_SRC adoc
link:index.html[Docs]
#+END_SRC


** Email and IRC
#+BEGIN_SRC adoc
devel@discuss.arquillian.org

mailto:devel@discuss.arquillian.org[Discuss Arquillian]

mailto:devel-join@discuss.arquillian.org[Subscribe,Subscribe me,I want to join!]

irc://irc.freenode.org/#fedora
#+END_SRC


** Link with attributes (Asciidoctor only)
#+BEGIN_SRC adoc
http://discuss.asciidoctor.org[Discuss Asciidoctor,role=external,window=_blank]

http://discuss.asciidoctor.org[Discuss Asciidoctor^]

https://example.org["Google, Yahoo, Bing^",role=teal]
#+END_SRC

NOTE: Links with attributes (including the subject and body segments on mailto links) are a feature unique to Asciidoctor.
To enable them prior to 1.5.7, you must set the ~linkattrs~ attribute on the document.
Since 1.5.7, attribute parsing is enabled automatically if an equal sign follows a comma.
When attribute parsing is enabled, you must quote the link text if it contains a comma.


** Inline anchors
#+BEGIN_SRC adoc
[[bookmark-a]]Inline anchors make arbitrary content referenceable.

[#bookmark-b]#Inline anchors can be applied to a phrase like this one.#

anchor:bookmark-c[]Use a cross reference to link to this location.

[[bookmark-d,last paragraph]]The xreflabel attribute will be used as link text in the cross-reference link.
#+END_SRC


** Internal cross references
#+BEGIN_SRC adoc
See <<paragraphs>> to learn how to write paragraphs.

Learn how to organize the document into <<section-titles,sections>>.
#+END_SRC


** Inter-document cross references (Asciidoctor only)
#+BEGIN_SRC adoc
Refer to <<document-b.adoc#section-b,Section B>> for more information.

See you when you get back from <<document-b#section-b,Section B>>!
#+END_SRC


* Images
Images are resolved relative to the value of the [[uri-imagesdir][imagesdir]] document attribute, which is empty by default.
You are encouraged to make use of the ~imagesdir~ attribute to avoid hard-coding the common path to your images in every image macro.

The ~imagesdir~ attribute can be an absolute path, relative path, or base URL.
When the image target is a URL or absolute path, the imagesdir prefix is *not* prepended.

** Block
#+BEGIN_SRC adoc
image::sunset.jpg[]

image::sunset.jpg[Sunset]

[#img-sunset]
[caption="Figure 1: ",link=https://www.flickr.com/photos/javh/5448336655]
image::sunset.jpg[Sunset,300,200]

image::https://asciidoctor.org/images/octocat.jpg[GitHub mascot]
#+END_SRC


** Inline
#+BEGIN_SRC adoc
Click image:icons/play.png[Play, title="Play"] to get the party started.

Click image:icons/pause.png[title="Pause"] when you need a break.
#+END_SRC

IMPORTANT: Two colons following the image keyword in the macro (i.e., `image::`) indicates a block image (aka figure), whereas one colon following the image keyword (i.e., `image:`) indicates an inline image.
(All macros follow this pattern).
You use an inline image when you need to place the image in a line of text.
Otherwise, you should prefer the block form.


** Inline image with positioning role
#+BEGIN_SRC adoc
image:sunset.jpg[Sunset,150,150,role="right"] What a beautiful sunset!
#+END_SRC

TIP: There are a variety of attributes available to [[uri-image-attrs][position and frame images]].


** Embedded
#+BEGIN_SRC adoc
= Document Title
:data-uri:
#+END_SRC

NOTE: When the ~data-uri~ attribute is set, all images in the document--including admonition icons--are embedded into the document as [[uri-data-uri][data URIs]].

TIP: Instead of declaring the ~data-uri~ attribute in the document, you can pass it as a command-line argument using `-a data-uri`.


* Videos

** Block
#+BEGIN_SRC adoc
video::video_file.mp4[]

video::video_file.mp4[width=640, start=60, end=140, options=autoplay]
#+END_SRC


** Embedded Youtube video
#+BEGIN_SRC adoc
video::rPQoq7ThGAU[youtube]
#+END_SRC


** Embedded Vimeo video
#+BEGIN_SRC adoc
video::67480300[vimeo]
#+END_SRC

TIP: You can control the video settings using [[uri-video][additional attributes and options]] on the macro.


* Source Code

** Inline (monospace only)
#+BEGIN_SRC adoc
"`Wait!`" Indigo plucked a small vial from her desk's top drawer and held it toward us.
The vial's label read: `E=mc^2^`; the `_E_` represents _energy_, but also pure _genius!_
#+END_SRC


** Inline (literal)
#+BEGIN_SRC adoc
Output literal monospace text such as `+{backtick}+` by
enclosing the text in pluses, then in backticks.
#+END_SRC


** Literal line
#+BEGIN_SRC adoc
 Indent the line one space to insert a code snippet
#+END_SRC


** Literal block
#+BEGIN_SRC adoc
....
error: The requested operation returned error: 1954 Forbidden search for defensive operations manual
absolutely fatal: operation initiation lost in the dodecahedron of doom
would you like to die again? y/n
....
#+END_SRC


** Listing block with title, no syntax highlighting
#+BEGIN_SRC adoc
.Gemfile.lock
----
GEM
  remote: https://rubygems.org/
  specs:
    asciidoctor (1.5.6.1)

PLATFORMS
  ruby

DEPENDENCIES
  asciidoctor (~> 1.5.6.1)
----
#+END_SRC


** Code block with title and syntax highlighting
#+BEGIN_SRC adoc
.app.rb
[source,ruby]
----
require 'sinatra'

get '/hi' do
  "Hello World!"
end
----
#+END_SRC


** Code block with callouts
#+BEGIN_SRC adoc
[source,ruby]
----
require 'sinatra' // <1>

get '/hi' do // <2>
  "Hello World!" // <3>
end
----
<1> Library import
<2> URL mapping
<3> HTTP response body
#+END_SRC


** Code block with non-selectable callouts
#+BEGIN_SRC adoc
----
line of code  // <1>
line of code  # <2>
line of code  ;; <3>
----
<1> A callout behind a line comment for C-style languages.
<2> A callout behind a line comment for Ruby, Python, Perl, etc.
<3> A callout behind a line comment for Clojure.
#+END_SRC


** XML code block with a non-selectable callout
#+BEGIN_SRC adoc
[source,xml]
----
<section>
  <title>Section Title</title> <!--1-->
</section>
----
<1> The section title is required.
#+END_SRC


** Code block sourced from file
#+BEGIN_SRC adoc
[source,ruby]
----
include::app.rb[]
----
#+END_SRC


** Code block sourced from file relative to source directory
#+BEGIN_SRC adoc
:sourcedir: src/main/java

[source,java]
----
include::{sourcedir}/org/asciidoctor/Asciidoctor.java[]
----
#+END_SRC


** Strip leading indentation from source
#+BEGIN_SRC adoc
[source,ruby,indent=0]
----
include::lib/document.rb[lines=5..10]
----
#+END_SRC

#+BEGIN_QUOTE
- When ~indent~ is 0, the leading block indent is stripped (tabs are replaced with 4 spaces).
- When ~indent~ is > 0, the leading block indent is first stripped (tabs are replaced with 4 spaces), then a block is indented by the number of columns equal to this value.
#+END_QUOTE


** Code block without delimiters (no blank lines)
#+BEGIN_SRC adoc
[source,xml]
<meta name="viewport"
  content="width=device-width, initial-scale=1.0">

This is normal content.
#+END_SRC


** Enabling the syntax highlighter
Syntax highlighting is enabled by setting the ~source-highlighter~ attribute in the document header or passed as an argument.

#+BEGIN_SRC adoc
:source-highlighter: pygments
#+END_SRC

The valid options are ~coderay~, ~highlightjs~, ~prettify~, and ~pygments~.


* More Delimited Blocks
** Sidebar
#+BEGIN_SRC adoc
.AsciiDoc history
****
AsciiDoc was first released in Nov 2002 by Stuart Rackham.
It was designed from the start to be a shorthand syntax
for producing professional documents like DocBook and LaTeX.
****
#+END_SRC

NOTE: Any block can have a title, positioned above the block.
A block title is a line of text that starts with a dot.
The dot cannot be followed by a space.


** Example
#+BEGIN_SRC adoc
.Sample document
====
Here's a sample AsciiDoc document:

[listing]
....
= Title of Document
Doc Writer
:toc:

This guide provides...
....

The document header is useful, but not required.
====
#+END_SRC


** <<admon-bl>> Admonition
#+BEGIN_SRC adoc
[NOTE]
====
An admonition block may contain complex content.

.A list
- one
- two
- three

Another paragraph.
====
#+END_SRC


** Admonition and callout icons
#+BEGIN_QUOTE
Asciidoctor can "draw" icons using {uri-fontawesome}[Font Awesome^] and CSS.

To use this feature, set the value of the ~icons~ document attribute to ~font~.
Asciidoctor will then emit HTML markup that selects an appropriate font character from the Font Awesome font for each admonition block.

Icons can also be used [[uri-icon-in][inline]] and [[uri-icon-attrs][styled]].
#+END_QUOTE


** Blockquote
#+BEGIN_SRC adoc
[quote, Abraham Lincoln, Address delivered at the dedication of the Cemetery at Gettysburg]
____
Four score and seven years ago our fathers brought forth
on this continent a new nation...
____

[quote, Albert Einstein]
A person who never made a mistake never tried anything new.

____
A person who never made a mistake never tried anything new.
____

[quote, Charles Lutwidge Dodgson, 'Mathematician and author, also known as https://en.wikipedia.org/wiki/Lewis_Carroll[Lewis Carroll]']
____
If you don't know where you are going, any road will get you there.
____
#+END_SRC


** Abbreviated blockquote (Asciidoctor only)
#+BEGIN_SRC adoc
"I hold it that a little rebellion now and then is a good thing,
and as necessary in the political world as storms in the physical."
-- Thomas Jefferson, Papers of Thomas Jefferson: Volume 11
#+END_SRC


** Air quotes: the best thing since fenced code blocks (Asciidoctor only)
#+BEGIN_SRC adoc
[, James Baldwin]
""
Not everything that is faced can be changed.
But nothing can be changed until it is faced.
""
#+END_SRC


** Passthrough
#+BEGIN_SRC adoc
++++
<p>
Content in a passthrough block is passed to the output unprocessed.
That means you can include raw HTML, like this embedded Gist:
</p>

<script src="https://gist.github.com/mojavelinux/5333524.js">
</script>
++++
#+END_SRC


** Open
#+BEGIN_SRC adoc
--
An open block can be an anonymous container,
or it can masquerade as any other block.
--

[source]
--
puts "I'm a source block!"
--
#+END_SRC


[listing]


** Custom substitutions
#+BEGIN_SRC adoc
:version: 1.5.6.1

[source,xml,subs="verbatim,attributes"]
----
<dependency>
  <groupId>org.asciidoctor</groupId>
  <artifactId>asciidoctor-java-integration</artifactId>
  <version>{version}</version>
</dependency>
----
#+END_SRC


* Block Id, Role and Options

** Traditional (longhand) markup method for assigning block id and role
#+BEGIN_SRC adoc
[[goals]]
[role="incremental"]
 * Goal 1
 * Goal 2
#+END_SRC


** Shorthand markup method for assigning block id and role (Asciidoctor only)
#+BEGIN_SRC adoc
[#goals.incremental]
 * Goal 1
 * Goal 2
#+END_SRC

#+BEGIN_QUOTE
- To specify multiple roles using the shorthand syntax, separate them by dots.
- The order of ~id~ and ~role~ values in the shorthand syntax does not matter.
#+END_QUOTE


** Traditional (longhand) markup method for assigning quoted text anchor (id) and role
#+BEGIN_SRC adoc
[[free_the_world]][big goal]_free the world_
#+END_SRC


** Shorthand markup method for assigning quoted text anchor (id) and role (Asciidoctor only)
#+BEGIN_SRC adoc
[#free_the_world.big.goal]_free the world_
#+END_SRC


** Role assigned to text enclosed in backticks
#+BEGIN_SRC adoc
[.rolename]`monospace text`
#+END_SRC


** Traditional (longhand) markup method for assigning block options
#+BEGIN_SRC adoc
[options="header,footer,autowidth"]
|===
|Cell A |Cell B
|===
#+END_SRC


** Shorthand markup method for assigning block options (Asciidoctor only)
#+BEGIN_SRC 
[%header%footer%autowidth]
|===
|Cell A |Cell B
|===
#+END_SRC


* Comments

** Line
#+BEGIN_SRC adoc
// A single-line comment.
#+END_SRC

TIP: Single-line comments can be used to divide elements, such as two adjacent lists.


** Block
#+BEGIN_SRC adoc
////
A multi-line comment.

Notice it's a delimited block.
////
#+END_SRC


* Tables

** Table with a title, three columns, a header, and two rows of content
#+BEGIN_SRC adoc
.Table Title
|===
// <1>
|Name of Column 1 |Name of Column 2 |Name of Column 3 
// <2>
|Cell in column 1, row 1
|Cell in column 2, row 1
|Cell in column 3, row 1

|Cell in column 1, row 2
|Cell in column 2, row 2
|Cell in column 3, row 2
|===
#+END_SRC

- ~<1>~ Unless the ~cols~ attribute is specified, the number of columns is equal to the number of cell separator characters on the first (non-blank) line between the block delimiters.
- ~<2>~ When a blank line follows the first non-blank line, the cell in the first line get promoted to the table header.


** Table with two columns, a header, and two rows of content
#+BEGIN_SRC adoc
// <1>
[%header,cols=2*] 
|===
|Name of Column 1
|Name of Column 2

|Cell in column 1, row 1
|Cell in column 2, row 1

|Cell in column 1, row 2
|Cell in column 2, row 2
|===
#+END_SRC

- ~<1>~ The ~+*+~ in the ~cols~ attribute is the repeat operator.
It means repeat the column specification across the remaining of columns.
In this case, we are repeating the default formatting across 2 columns.
When the cells in the header are not defined on a single line, you must use the ~cols~ attribute to set the number of columns in the table and the `%header` option (or `options=header` attribute) to promote the first row to the table header.


** Table with three columns, a header, and two rows of content
#+BEGIN_SRC adoc
// <1>
[cols="1,1,2", options="header"] 
.Applications
|===
|Name
|Category
|Description

|Firefox
|Browser
|Mozilla Firefox is an open-source web browser.
It's designed for standards compliance,
performance, portability.

|Arquillian
|Testing
|An innovative and highly extensible testing platform.
Empowers developers to easily create real, automated tests.
|===
#+END_SRC

~<1>~ In this example, the ~cols~ attribute has two functions.
It specifies that this table has three columns, and it sets their relative widths.


** Table with column containing AsciiDoc content
#+BEGIN_SRC adoc
[cols="2,2,5a"]
|===
|Firefox
|Browser
|Mozilla Firefox is an open-source web browser.

It's designed for:

- standards compliance
- performance
- portability

https://www.mozilla.org/en-US/firefox/new[Get Firefox]!
|===
#+END_SRC


** Table from CSV data
#+BEGIN_SRC adoc
[%header,format=csv]
|===
Artist,Track,Genre
Baauer,Harlem Shake,Hip Hop
The Lumineers,Ho Hey,Folk Rock
|===
#+END_SRC


** Table from CSV data using shorthand (Asciidoctor only)
#+BEGIN_SRC adoc
,===
Artist,Track,Genre

Baauer,Harlem Shake,Hip Hop
,===
#+END_SRC


** Table from CSV data in file
#+BEGIN_SRC adoc
|===
include::customers.csv[]
|===
#+END_SRC


** Table from DSV data using shorthand (Asciidoctor only)
#+BEGIN_SRC adoc
:===
Artist:Track:Genre

Robyn:Indestructable:Dance
:===
#+END_SRC


** Table with formatted, aligned and merged cells
#+BEGIN_SRC adoc
[cols="e,m,^,>s", width="25%"]
|===
|1 >s|2 |3 |4
^|5 2.2+^.^|6 .3+<.>m|7
^|8
|9 2+>|10
|===
#+END_SRC



* UI Macros

IMPORTANT: You *must* set the ~experimental~ attribute in the document header to enable these macros.

** Keyboard shortcuts (inline kbd macro)
#+BEGIN_SRC adoc
|===
|Shortcut |Purpose

|kbd:[F11]
|Toggle fullscreen

|kbd:[Ctrl+T]
|Open a new tab

|kbd:[Ctrl+Shift+N]
|New incognito window

|kbd:[\ ]
|Used to escape characters

|kbd:[Ctrl+\]]
|Jump to keyword

|kbd:[Ctrl + +]
|Increase zoom
|===
#+END_SRC



** Menu selections (inline menu macro)
#+BEGIN_SRC adoc
To save the file, select menu:File[Save].

Select menu:View[Zoom > Reset] to reset the zoom level to the default setting.
#+END_SRC



** Buttons (inline btn macro)
#+BEGIN_SRC adoc
Press the btn:[OK] button when you are finished.

Select a file in the file navigator and click btn:[Open].
#+END_SRC



* Attributes and Substitutions

** Attribute declaration and usage
#+BEGIN_SRC adoc
:url-home: https://asciidoctor.org
:link-docs: https://asciidoctor.org/docs[documentation]
:summary: Asciidoctor is a mature, plain-text document format for \
       writing notes, articles, documentation, books, and more. \
       It's also a text processor & toolchain for translating \
       documents into various output formats (i.e., backends), \
       including HTML, DocBook, PDF and ePub.
:checkedbox: pass:normal[{startsb}&#10004;{endsb}]

Check out {url-home}[Asciidoctor]!

{summary}

Be sure to read the {link-docs} too!

{checkedbox} That's done!
#+END_SRC


** Attribute assignment precedence (highest to lowest)
- Attribute passed to the API or CLI that does not end in ~@~
- Attribute defined in the document
- Attribute passed to the API or CLI that ends in ~@~
- Intrinsic attribute value (default values)

TIP: To make an attribute value that is passed to the API or CLI have a lower precedence than an assignment in the document, add an ~@~ symbol to the end of the attribute value.


** Predefined attributes for character replacements\nbsp^{[1][2][3]}

| Attribute name | Replacement text | Appearance |
|----------------+------------------+------------|
| blank          | nothing          |            |
| empty          | nothing          |            |
| sp             | single space     |            |
| nbsp           | &#160;           | \nbsp          |
| zwsp^{[4]}        | &#8203;          | ​           |
| wj^{[5]}          | &#8288;          | ⁠           |
| apos           | &#39;            | '          |
| quot           | &#34;            | "          |
| lsquo          | &#8216;          | ‘          |
| rsquo          | &#8217;          | ’          |
| ldquo          | &#8220;          | “          |
| rdquo          | &#8221;          | ”          |
| deg            | &#176;           | °          |
| plus           | &#43;            | +          |
| brvbar         | &#166;           | ¦          |
| vbar           | \vert                | \vert          |
| amp            | &                | &          |
| lt             | <                | <          |
| gt             | >                | >          |
| startsb        | [                | [          |
| endsb          | ]                | ]          |
| caret          | ^                | ^          |
| asterisk       | *                | *          |
| tilde          | ~                | ~          |
| backslash      | \                | \          |
| backtick       | `                | `          |
| two-colons     | ::               | ::         |
| two-semicolons | ;;               | ;;         |
| cpp            | C++              | C++        |

⁠^{[1]} Some replacements are Unicode characters, whereas others are numeric character references (e.g., \&#34;).
These character references are used whenever the use of the Unicode character could interfere with the AsciiDoc syntax or confuse the renderer (i.e., the browser).
It's up to the converter to transform the reference into something the renderer understands (something both the man page and PDF converter handle).

⁠^{[2]} Asciidoctor does not prevent you from reassigning predefined attributes.
However, it's best to treat them as read-only unless the output format requires the use of a different encoding scheme.
These attributes are an effective tool for decoupling content and presentation.

⁠^{[3]} Asciidoctor allows you to use any of the named character references (aka named entities) defined in HTML (e.g., \&euro; resolves to &euro;).
However, using named character references can cause problems when generating non-HTML output such as PDF because the lookup table needed to resolve these names may not be defined.
Our recommendation is avoid using named character references--with the exception of those defined in XML (i.e., lt, gt, amp, quot and apos).
Instead, use numeric character references (e.g., \&#8364;).

⁠^{[4]} The Zero Width Space (ZWSP) is a code point in Unicode that shows where a long word can be split if necessary.

⁠^{[5]} The word joiner (WJ) is a code point in Unicode that prevents a line break at its position.


** Environment attributes

| Attribute           | Description                                                              | Example Value                       |
| asciidoctor         | Set if the current processor is Asciidoctor.                             |                                     |
| asciidoctor-version | Asciidoctor version.                                                     | 1.5.7.1                             |
| backend             | Backend used to create the output file.                                  | html5                               |
| basebackend         | The backend value minus any trailing numbers.                            | html                                |
|                     | For example, if the backend is `docbook5`, the basebackend is `docbook`. |                                     |
| docdate             | Last modified date of the source document.^{[[[note-docdatetime][1]]],[[[note-sourcedateepoch][2]]]}                        | 2019-01-04                          |
| docdatetime         | Last modified date and time of the source document.^{[[[note-docdatetime][1]]],[[[note-sourcedateepoch][2]]]}               | 2019-01-04 19:26:06 UT              |
| docdir              | Full path of the directory that contains the source document.            | /home/user/docs                     |
| docfile             | Full path of the source document.                                        | /home/user/docs/userguide.adoc      |
| docfilesuffix       | File extension of the source document, including the leading period.     | .adoc                               |
|                     | *Introduced in 1.5.6.*                                                   |                                     |
| docname             | Root name of the source document (no leading path or file extension).    | userguide                           |
| doctime             | Last modified time of the source document.^{[[[note-docdatetime][1]]],[[[note-sourcedateepoch][2]]]}                        | 19:26:06 UTC                        |
| doctype             | Document type (article, book or manpage).                                | article                             |
| docyear             | Year that the document was last modified.^{[[[note-docdatetime][1]]],[[[note-sourcedateepoch][2]]]}                         | 2018                                |
| embedded            | Set if content is being converted to an embeddable document (body only). |                                     |
| filetype            | File extension of the output file name (without leading period).         | html                                |
| htmlsyntax          | Syntax used when generating the HTML output (html or xhtml).             | html                                |
| localdate           | Date when the document was converted.^{[[[note-sourcedateepoch][2]]]}                                 | 2019-02-17                          |
| localdatetime       | Date and time when the document was converted.^{[[[note-sourcedateepoch][2]]]}                        | 2019-02-17 19:31:05 UTC             |
| localtime           | Time when the document was converted.^{[[[note-sourcedateepoch][2]]]}                                 | 19:31:05 UTC                        |
| localyear           | Year when the document was converted.^{[[[note-sourcedateepoch][2]]]}                                 | 2018                                |
| outdir              | Full path of the output directory.                                       | /home/user/docs/dist                |
| outfile             | Full path of the output file.                                            | /home/user/docs/dist/userguide.html |
| outfilesuffix       | file extension of the output file (starting with a                       | .html                               |
|                     | period) as determinedby the backend.^{[[[note-outfilesuffix][3]]]} *Safe to modify.*                |                                     |

| safe-mode-level     | Numeric value of the safe mode setting.                                  | 20                                  |
|                     | (UNSAFE=0, SAFE=10, SERVER=10, SECURE=20).                               |                                     |
| safe-mode-name      | Textual value of the safe mode setting.                                  | SERVER                              |
| safe-mode-unsafe    | Set if the safe mode is UNSAFE.                                          |                                     |
| safe-mode-safe      | Set if the safe mode is SAFE.                                            |                                     |
| safe-mode-server    | Set if the safe mode is SERVER.                                          |                                     |
| safe-mode-secure    | Set if the safe mode is SECURE.                                          |                                     |
| user-home           | Home directory of the current user. Resolves to `.`                      | /home/user                          |
|                     | if the safe mode is SERVER or greater.                                                                         |                                     |


<<note-docdatetime>>^{[1]} Only reflects the last modified time of the source document file.
It does not consider the last modified time of files which are included.

<<note-sourcedateepoch>>^{[2]} If the SOURCE\under{}DATE\under{}EPOCH environment variable is set, the value assigned to this attribute is built from a UTC date object that corresponds to the timestamp (as an integer) stored in that environment variable.
This override offers one way to make the conversion reproducible.
See https://reproducible-builds.org/specs/source-date-epoch/ for more information about the SOURCE\under{}DATE\under{}EPOCH environment variable.
Otherwise, the date is expressed in the local time zone, which is reported as a time zone offset (e.g., ~-0600~) or UTC if the time zone offset is 0).
To force the use of UTC, set the ~TZ=UTC~ environment variable when invoking Asciidoctor.

<<note-outfilesuffix>>^{[3]} ~.html~ for ~html~, ~.xml~ for ~docbook~, etc. The value is not updated to match the file extension of the output file when one is specified explicitly.


** Named substitutions
| ~none~                              | Disables substitutions                                       |
| ~normal~                            | Performs all substitutions except for callouts               |
| ~verbatim~                          | Replaces special characters and processes callouts           |
| ~specialchars~, ~specialcharacters~ | Replaces ~<~, ~>~, and ~&~ with their corresponding entities |
| ~quotes~                            | Applies text formatting                                      |
| ~attributes~                        | Replaces attribute references                                |
| ~replacements~                      | Substitutes textual and character reference replacements     |
| ~macros~                            | Processes macros                                             |
| ~post_replacements~                 | Replaces the line break character (~{plus}~)                 |


** Counter attributes
#+BEGIN_SRC adoc
[caption=""]
.Parts{counter2:index:0}
|===
|Part Id |Description

|PX-{counter:index}
|Description of PX-{index}

|PX-{counter:index}
|Description of PX-{index}
|===
#+END_SRC


* Text Replacement

** Textual symbol replacements
| Name                   | Syntax | Unicode Replacement | Rendered | Notes                                                                                                      |
| Copyright              | (C)    | &#169;              | (C)      |                                                                                                            |
| Registered             | (R)    | &#174;              | (R)      |                                                                                                            |
| Trademark              | (TM)   | &#8482;             | (TM)     |                                                                                                            |
| Em dash                | --     | &#8212;             | --       | Only replaced if between two word characters, between a word character and a line boundary, or flanked by  |
|                        |        |                     |          | spaces. When flanked by space characters (e.g., `+a -- b+`), the normal spaces are replaced by thin spaces |
|                        |        |                     |          | (\&#8201;).                                                                                                |
| Ellipsis               | ...    | &#8230;             | ...      |                                                                                                            |
| Single right arrow     | ->     | &#8594;             | ->       |                                                                                                            |
| Double right arrow     | =>     | &#8658;             | =>       |                                                                                                            |
| Single left arrow      | <-     | &#8592;             | <-       |                                                                                                            |
| Double left arrow      | <=     | &#8656;             | <=       |                                                                                                            |
| Typographic apostrophe | Sam's  | Sam&#8217;s         | Sam's    | The typewriter apostrophe is replaced with the typographic (aka curly) apostrophe.                         |

TIP: Any named, numeric or hexadecimal [[uri-char-xml][XML character reference]] is supported.


* Escaping Text

** Backslash
#+BEGIN_SRC adoc
\*Stars* is not rendered as bold text.
The asterisks around the word are preserved.

\{author} is not resolved to the author name.
The curly brackets around the word are preserved.

`A\--Z` connects A to Z in monospace using two dashes.
The dashes are not replaced by an em dash.

\[[Word]] is not interpreted as an anchor.
The double brackets around the word are preserved.

[\[[Word]]] is not interpreted as a bibliography anchor.
The triple brackets around the word are preserved.

In these cases, the backslash character is automatically removed.
#+END_SRC


** Passthrough ("~plus for passthrough~")
#+BEGIN_SRC adoc
Text between + characters, such as +/user/{name}+, is not substituted.
However, special characters like +<+ and +>+ are still escaped.

You can write `C++{plus}{plus}++` as `+{cpp}+`.
#+END_SRC


** Raw (triple plus and inline pass macro)
#+BEGIN_SRC adoc
+++<u>underline me</u>+++ is underlined.

pass:[<u>underline me</u>] is also underlined.
#+END_SRC


* Table of Contents (ToC)
** Document with ToC
#+BEGIN_SRC adoc
= AsciiDoc Writer's Guide
Doc Writer <doc.writer@asciidoctor.org>
v1.0, 2013-08-01
:toc:
#+END_SRC


** Document with ToC positioned on the right
#+BEGIN_SRC adoc
= AsciiDoc Writer's Guide
Doc Writer <doc.writer@asciidoctor.org>
v1.0, 2014-08-01
:toc: right
#+END_SRC

TIP: The ToC [[uri-toc][title, levels, and positioning]] can be customized.


* Bibliography

** Bibliography with inbound references
#+BEGIN_SRC adoc
_The Pragmatic Programmer_ <<pp>> should be required reading for all developers.
To learn all about design patterns, refer to the book by the "`Gang of Four`" <<gof>>.

[bibliography]
== References

- [[[pp]]] Andy Hunt & Dave Thomas. The Pragmatic Programmer:
  From Journeyman to Master. Addison-Wesley. 1999.
- [[[gof,2]]] Erich Gamma, Richard Helm, Ralph Johnson & John Vlissides. Design Patterns:
  Elements of Reusable Object-Oriented Software. Addison-Wesley. 1994.
#+END_SRC


* Footnotes

** Normal and reusable footnotes
#+BEGIN_SRC adoc
A statement.footnote:[Clarification about this statement.]

A bold statement!footnote:disclaimer[Opinions are my own.]

Another bold statement.footnote:disclaimer[]
#+END_SRC


* Markdown Compatibility
Markdown compatible syntax is only available when using Asciidoctor.

** Markdown-style headings
#+BEGIN_SRC markdown
# Document Title (Level 0)

## Section Level 1

### Section Level 2

#### Section Level 3

##### Section Level 4

###### Section Level 5
#+END_SRC


** Fenced code block with syntax highlighting
#+BEGIN_SRC markdown
```ruby
require 'sinatra'

get '/hi' do
  "Hello World!"
end
```
#+END_SRC


** Markdown-style blockquote
#+BEGIN_SRC markdown
> I hold it that a little rebellion now and then is a good thing,
> and as necessary in the political world as storms in the physical.
> -- Thomas Jefferson, Papers of Thomas Jefferson: Volume 11
#+END_SRC


** Markdown-style blockquote with block content
#+BEGIN_SRC markdown 
> > What's new?
>
> I've got Markdown in my AsciiDoc!
>
> > Like what?
>
> * Blockquotes
> * Headings
> * Fenced code blocks
>
> > Is there more?
>
> Yep. AsciiDoc and Markdown share a lot of common syntax already.
#+END_SRC


** Markdown-style horizontal rules
#+BEGIN_SRC markdown 
---

- - -

***

 * * *
#+END_SRC


* User Manual and Help

To learn more about Asciidoctor and its capabilities, check out the other [[https://asciidoctor.org/docs/][Asciidoctor guides]] and its [[user-manual][User Manual]].
Also, don't forget to join the [[uri-mailinglist][Asciidoctor mailing list]], where you can ask questions and leave comments.


* Links & Definition :noexport:

#+LINK: docs            https://asciidoctor.org/docs/
#+LINK: user-manual     https://asciidoctor.org/docs/user-manual/#
#+LINK: uri-config      https://github.com/asciidoctor/asciidoctor/blob/master/compat/asciidoc.conf
#+LINK: uri-fontawesome https://fontawesome.com/v4.7.0/
#+LINK: uri-icon-in     https://asciidoctor.org/docs/user-manual/#inline-icons
#+LINK: uri-icon-attrs  https://asciidoctor.org/docs/user-manual/#size-rotate-and-flip
#+LINK: uri-video       https://asciidoctor.org/docs/user-manual/#video
#+LINK: uri-checklist   https://asciidoctor.org/docs/user-manual/#checklist
#+LINK: uri-marker      https://asciidoctor.org/docs/user-manual/#custom-markers
#+LINK: uri-list-num    https://asciidoctor.org/docs/user-manual/#numbering-styles
#+LINK: uri-imagesdir   https://asciidoctor.org/docs/user-manual/#setting-the-location-of-images
#+LINK: uri-image-attrs https://asciidoctor.org/docs/user-manual/#putting-images-in-their-place
#+LINK: uri-toc         https://asciidoctor.org/docs/user-manual/#user-toc
#+LINK: uri-para        https://asciidoctor.org/docs/user-manual/#paragraph
#+LINK: uri-literal     https://asciidoctor.org/docs/user-manual/#literal-text-and-blocks
#+LINK: uri-admon       https://asciidoctor.org/docs/user-manual/#admonition
#+LINK: uri-bold        https://asciidoctor.org/docs/user-manual/#bold-and-italic
#+LINK: uri-quote       https://asciidoctor.org/docs/user-manual/#curved
#+LINK: uri-sub         https://asciidoctor.org/docs/user-manual/#subscript-and-superscript
#+LINK: uri-mono        https://asciidoctor.org/docs/user-manual/#mono
#+LINK: uri-css         https://asciidoctor.org/docs/user-manual/#custom-styling-with-attributes
#+LINK: uri-pass        https://asciidoctor.org/docs/user-manual/#pass-macros
#+LINK: uri-mailinglist http://discuss.asciidoctor.org
#+LINK: uri-char-xml    https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references
#+LINK: uri-data-uri    https://developer.mozilla.org/en-US/docs/data_URIs
